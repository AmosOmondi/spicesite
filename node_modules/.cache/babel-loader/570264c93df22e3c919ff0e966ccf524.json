{"ast":null,"code":"import { API } from '../config';\nimport queryString from 'query-string';\n\n// Get products from backend\nexport const getProducts = sortBy => {\n  return fetch(`${API}/products?sortBy=${sortBy}&order=desc&limit=6`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\n\n// Get categories from backend\nexport const getCategories = () => {\n  return fetch(`${API}/categories`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\n\n// Fetch products based on filters\nexport const getFilteredProducts = (skip, limit, filters = {}) => {\n  const data = {\n    skip,\n    limit,\n    filters\n  };\n  return fetch(`${API}/products/by/search`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  }).then(response => {\n    return response.json();\n  }).catch(err => {\n    console.log(err);\n  });\n};\n\n// Get products from backend based on search query parameters\n// params are the category id and the value the user types in the search bar\nexport const list = params => {\n  const query = queryString.stringify(params);\n  console.log('query', query);\n  return fetch(`${API}/products/search?${query}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\n\n// Get a product based on product id\nexport const read = productId => {\n  return fetch(`${API}/product/${productId}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\n\n// Get related products from backend\nexport const listRelated = productId => {\n  return fetch(`${API}/products/related/${productId}`, {\n    method: 'GET'\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\n\n// Get Braintree clientToken from backend. For authenticated users only\nexport const getBraintreeClientToken = (userId, token) => {\n  return fetch(`${API}/braintree/getToken/${userId}`, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\n\n// Process payment in backend\n// paymentData contains the payment method and total amount\nexport const processPayment = (userId, token, paymentData) => {\n  return fetch(`${API}/braintree/payment/${userId}`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    // Send the payment data\n    body: JSON.stringify(paymentData)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\n\n// Create order in backend\nexport const createOrder = (userId, token, createOrderData) => {\n  return fetch(`${API}/order/create/${userId}`, {\n    method: 'POST',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    // Send the order data\n    body: JSON.stringify({\n      order: createOrderData\n    })\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"names":["API","queryString","getProducts","sortBy","fetch","method","then","response","json","catch","err","console","log","getCategories","getFilteredProducts","skip","limit","filters","data","headers","Accept","body","JSON","stringify","list","params","query","read","productId","listRelated","getBraintreeClientToken","userId","token","Authorization","processPayment","paymentData","createOrder","createOrderData","order"],"sources":["D:/webprojects/react/ecom/two/src/core/apiCore.js"],"sourcesContent":["import { API } from '../config';\r\nimport queryString from 'query-string';\r\n\r\n// Get products from backend\r\nexport const getProducts = (sortBy) => {\r\n\treturn fetch(`${API}/products?sortBy=${sortBy}&order=desc&limit=6`, {\r\n\t\tmethod: 'GET'\r\n\t})\r\n\t\t.then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.catch((err) => console.log(err));\r\n};\r\n\r\n// Get categories from backend\r\nexport const getCategories = () => {\r\n\treturn fetch(`${API}/categories`, {\r\n\t\tmethod: 'GET'\r\n\t})\r\n\t\t.then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.catch((err) => console.log(err));\r\n};\r\n\r\n// Fetch products based on filters\r\nexport const getFilteredProducts = (skip, limit, filters = {}) => {\r\n\tconst data = { skip, limit, filters };\r\n\treturn fetch(`${API}/products/by/search`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json'\r\n\t\t},\r\n\t\tbody: JSON.stringify(data)\r\n\t})\r\n\t\t.then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.catch((err) => {\r\n\t\t\tconsole.log(err);\r\n\t\t});\r\n};\r\n\r\n// Get products from backend based on search query parameters\r\n// params are the category id and the value the user types in the search bar\r\nexport const list = (params) => {\r\n\tconst query = queryString.stringify(params);\r\n\tconsole.log('query', query);\r\n\treturn fetch(`${API}/products/search?${query}`, {\r\n\t\tmethod: 'GET'\r\n\t})\r\n\t\t.then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.catch((err) => console.log(err));\r\n};\r\n\r\n// Get a product based on product id\r\nexport const read = (productId) => {\r\n\treturn fetch(`${API}/product/${productId}`, {\r\n\t\tmethod: 'GET'\r\n\t})\r\n\t\t.then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.catch((err) => console.log(err));\r\n};\r\n\r\n// Get related products from backend\r\nexport const listRelated = (productId) => {\r\n\treturn fetch(`${API}/products/related/${productId}`, {\r\n\t\tmethod: 'GET'\r\n\t})\r\n\t\t.then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.catch((err) => console.log(err));\r\n};\r\n\r\n// Get Braintree clientToken from backend. For authenticated users only\r\nexport const getBraintreeClientToken = (userId, token) => {\r\n\treturn fetch(`${API}/braintree/getToken/${userId}`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t}\r\n\t})\r\n\t\t.then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.catch((err) => console.log(err));\r\n};\r\n\r\n// Process payment in backend\r\n// paymentData contains the payment method and total amount\r\nexport const processPayment = (userId, token, paymentData) => {\r\n\treturn fetch(`${API}/braintree/payment/${userId}`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\t// Send the payment data\r\n\t\tbody: JSON.stringify(paymentData)\r\n\t})\r\n\t\t.then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.catch((err) => console.log(err));\r\n};\r\n\r\n// Create order in backend\r\nexport const createOrder = (userId, token, createOrderData) => {\r\n\treturn fetch(`${API}/order/create/${userId}`, {\r\n\t\tmethod: 'POST',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\t// Send the order data\r\n\t\tbody: JSON.stringify({ order: createOrderData })\r\n\t})\r\n\t\t.then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.catch((err) => console.log(err));\r\n};\r\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,WAAW;AAC/B,OAAOC,WAAW,MAAM,cAAc;;AAEtC;AACA,OAAO,MAAMC,WAAW,GAAIC,MAAM,IAAK;EACtC,OAAOC,KAAK,CAAE,GAAEJ,GAAI,oBAAmBG,MAAO,qBAAoB,EAAE;IACnEE,MAAM,EAAE;EACT,CAAC,CAAC,CACAC,IAAI,CAAEC,QAAQ,IAAK;IACnB,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;EACvB,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;AACnC,CAAC;;AAED;AACA,OAAO,MAAMG,aAAa,GAAGA,CAAA,KAAM;EAClC,OAAOT,KAAK,CAAE,GAAEJ,GAAI,aAAY,EAAE;IACjCK,MAAM,EAAE;EACT,CAAC,CAAC,CACAC,IAAI,CAAEC,QAAQ,IAAK;IACnB,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;EACvB,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;AACnC,CAAC;;AAED;AACA,OAAO,MAAMI,mBAAmB,GAAGA,CAACC,IAAI,EAAEC,KAAK,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACjE,MAAMC,IAAI,GAAG;IAAEH,IAAI;IAAEC,KAAK;IAAEC;EAAQ,CAAC;EACrC,OAAOb,KAAK,CAAE,GAAEJ,GAAI,qBAAoB,EAAE;IACzCK,MAAM,EAAE,MAAM;IACdc,OAAO,EAAE;MACRC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IACjB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI;EAC1B,CAAC,CAAC,CACAZ,IAAI,CAAEC,QAAQ,IAAK;IACnB,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;EACvB,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAK;IACfC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EACjB,CAAC,CAAC;AACJ,CAAC;;AAED;AACA;AACA,OAAO,MAAMc,IAAI,GAAIC,MAAM,IAAK;EAC/B,MAAMC,KAAK,GAAGzB,WAAW,CAACsB,SAAS,CAACE,MAAM,CAAC;EAC3Cd,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEc,KAAK,CAAC;EAC3B,OAAOtB,KAAK,CAAE,GAAEJ,GAAI,oBAAmB0B,KAAM,EAAC,EAAE;IAC/CrB,MAAM,EAAE;EACT,CAAC,CAAC,CACAC,IAAI,CAAEC,QAAQ,IAAK;IACnB,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;EACvB,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;AACnC,CAAC;;AAED;AACA,OAAO,MAAMiB,IAAI,GAAIC,SAAS,IAAK;EAClC,OAAOxB,KAAK,CAAE,GAAEJ,GAAI,YAAW4B,SAAU,EAAC,EAAE;IAC3CvB,MAAM,EAAE;EACT,CAAC,CAAC,CACAC,IAAI,CAAEC,QAAQ,IAAK;IACnB,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;EACvB,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;AACnC,CAAC;;AAED;AACA,OAAO,MAAMmB,WAAW,GAAID,SAAS,IAAK;EACzC,OAAOxB,KAAK,CAAE,GAAEJ,GAAI,qBAAoB4B,SAAU,EAAC,EAAE;IACpDvB,MAAM,EAAE;EACT,CAAC,CAAC,CACAC,IAAI,CAAEC,QAAQ,IAAK;IACnB,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;EACvB,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;AACnC,CAAC;;AAED;AACA,OAAO,MAAMoB,uBAAuB,GAAGA,CAACC,MAAM,EAAEC,KAAK,KAAK;EACzD,OAAO5B,KAAK,CAAE,GAAEJ,GAAI,uBAAsB+B,MAAO,EAAC,EAAE;IACnD1B,MAAM,EAAE,KAAK;IACbc,OAAO,EAAE;MACRC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE,kBAAkB;MAClCa,aAAa,EAAG,UAASD,KAAM;IAChC;EACD,CAAC,CAAC,CACA1B,IAAI,CAAEC,QAAQ,IAAK;IACnB,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;EACvB,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;AACnC,CAAC;;AAED;AACA;AACA,OAAO,MAAMwB,cAAc,GAAGA,CAACH,MAAM,EAAEC,KAAK,EAAEG,WAAW,KAAK;EAC7D,OAAO/B,KAAK,CAAE,GAAEJ,GAAI,sBAAqB+B,MAAO,EAAC,EAAE;IAClD1B,MAAM,EAAE,MAAM;IACdc,OAAO,EAAE;MACRC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE,kBAAkB;MAClCa,aAAa,EAAG,UAASD,KAAM;IAChC,CAAC;IACD;IACAX,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACY,WAAW;EACjC,CAAC,CAAC,CACA7B,IAAI,CAAEC,QAAQ,IAAK;IACnB,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;EACvB,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;AACnC,CAAC;;AAED;AACA,OAAO,MAAM0B,WAAW,GAAGA,CAACL,MAAM,EAAEC,KAAK,EAAEK,eAAe,KAAK;EAC9D,OAAOjC,KAAK,CAAE,GAAEJ,GAAI,iBAAgB+B,MAAO,EAAC,EAAE;IAC7C1B,MAAM,EAAE,MAAM;IACdc,OAAO,EAAE;MACRC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE,kBAAkB;MAClCa,aAAa,EAAG,UAASD,KAAM;IAChC,CAAC;IACD;IACAX,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEe,KAAK,EAAED;IAAgB,CAAC;EAChD,CAAC,CAAC,CACA/B,IAAI,CAAEC,QAAQ,IAAK;IACnB,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;EACvB,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;AACnC,CAAC"},"metadata":{},"sourceType":"module"}