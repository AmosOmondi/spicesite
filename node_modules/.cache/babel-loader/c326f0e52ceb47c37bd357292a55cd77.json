{"ast":null,"code":"// JSON.parse() to convert json to object\n// JSON.stringify() to convert object to json\n\n// Add item to localStorage\nexport const addItem = (item, next) => {\n  let cart = [];\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      cart = JSON.parse(localStorage.getItem('cart'));\n    }\n    cart.push({\n      ...item,\n      count: 1\n    });\n\n    // REMOVE DUPLICATES\n    // - build an Array from new Set and turn it back into array using Array.from\n    // - so that later we can re-map it\n    // - new Set will only allow unique values in it\n    // - so pass the ids of each object/product\n    // - if the loop tries to add the same value again, it'll get ignored\n    // - ...with the array of ids we got when first map() was used\n    // - run map() on it again and return the actual product from the cart\n    cart = Array.from(new Set(cart.map(p => p._id))).map(id => {\n      return cart.find(p => p._id === id);\n    });\n    localStorage.setItem('cart', JSON.stringify(cart));\n    next();\n  }\n};\n\n// Get total items from cart, cart length, in localStorage\nexport const itemTotal = () => {\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      return JSON.parse(localStorage.getItem('cart')).length;\n    }\n  }\n  return 0;\n};\n\n// Get product items from cart in localStorage\nexport const getCart = () => {\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      return JSON.parse(localStorage.getItem('cart'));\n    }\n  }\n  return [];\n};\n\n// Update item count based on given product id and count\nexport const updateItem = (productId, count) => {\n  let cart = [];\n\n  // Get items from cart in localStorage and put them in cart array\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      cart = JSON.parse(localStorage.getItem('cart'));\n    }\n\n    // Update item count if the item id matches with the incoming productId\n    // Update item count with the incoming count\n    cart.map((product, i) => {\n      if (product._id === productId) {\n        cart[i].count = count;\n      }\n    });\n\n    // Set cart items back in localStorage\n    localStorage.setItem('cart', JSON.stringify(cart));\n  }\n};\n\n// Remove item count based on given product id and count\nexport const removeItem = productId => {\n  let cart = [];\n\n  // Get items from cart in localStorage and put them in cart array\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('cart')) {\n      cart = JSON.parse(localStorage.getItem('cart'));\n    }\n\n    // If id matches, remove item from cart using splice() method\n    cart.map((product, i) => {\n      if (product._id === productId) {\n        // 1st arg is the index of where to splice\n        // 2nd arg is how many to take out\n        cart.splice(i, 1);\n      }\n    });\n\n    // Set cart items back in localStorage\n    localStorage.setItem('cart', JSON.stringify(cart));\n  }\n  return cart;\n};\n\n// Remove items from cart in localStorage\n// next is a callback function\nexport const emptyCart = next => {\n  if (typeof window !== 'undefined') {\n    localStorage.removeItem('cart');\n    next();\n  }\n};","map":{"version":3,"names":["addItem","item","next","cart","window","localStorage","getItem","JSON","parse","push","count","Array","from","Set","map","p","_id","id","find","setItem","stringify","itemTotal","length","getCart","updateItem","productId","product","i","removeItem","splice","emptyCart"],"sources":["D:/webprojects/react/ecom/two/src/core/cartHelpers.js"],"sourcesContent":["// JSON.parse() to convert json to object\r\n// JSON.stringify() to convert object to json\r\n\r\n// Add item to localStorage\r\nexport const addItem = (item, next) => {\r\n\tlet cart = [];\r\n\r\n\tif (typeof window !== 'undefined') {\r\n\t\tif (localStorage.getItem('cart')) {\r\n\t\t\tcart = JSON.parse(localStorage.getItem('cart'));\r\n\t\t}\r\n\r\n\t\tcart.push({\r\n\t\t\t...item,\r\n\t\t\tcount: 1\r\n\t\t});\r\n\r\n\t\t// REMOVE DUPLICATES\r\n\t\t// - build an Array from new Set and turn it back into array using Array.from\r\n\t\t// - so that later we can re-map it\r\n\t\t// - new Set will only allow unique values in it\r\n\t\t// - so pass the ids of each object/product\r\n\t\t// - if the loop tries to add the same value again, it'll get ignored\r\n\t\t// - ...with the array of ids we got when first map() was used\r\n\t\t// - run map() on it again and return the actual product from the cart\r\n\t\tcart = Array.from(new Set(cart.map((p) => p._id))).map((id) => {\r\n\t\t\treturn cart.find((p) => p._id === id);\r\n\t\t});\r\n\r\n\t\tlocalStorage.setItem('cart', JSON.stringify(cart));\r\n\t\tnext();\r\n\t}\r\n};\r\n\r\n// Get total items from cart, cart length, in localStorage\r\nexport const itemTotal = () => {\r\n\tif (typeof window !== 'undefined') {\r\n\t\tif (localStorage.getItem('cart')) {\r\n\t\t\treturn JSON.parse(localStorage.getItem('cart')).length;\r\n\t\t}\r\n\t}\r\n\treturn 0;\r\n};\r\n\r\n// Get product items from cart in localStorage\r\nexport const getCart = () => {\r\n\tif (typeof window !== 'undefined') {\r\n\t\tif (localStorage.getItem('cart')) {\r\n\t\t\treturn JSON.parse(localStorage.getItem('cart'));\r\n\t\t}\r\n\t}\r\n\treturn [];\r\n};\r\n\r\n// Update item count based on given product id and count\r\nexport const updateItem = (productId, count) => {\r\n\tlet cart = [];\r\n\r\n\t// Get items from cart in localStorage and put them in cart array\r\n\tif (typeof window !== 'undefined') {\r\n\t\tif (localStorage.getItem('cart')) {\r\n\t\t\tcart = JSON.parse(localStorage.getItem('cart'));\r\n\t\t}\r\n\r\n\t\t// Update item count if the item id matches with the incoming productId\r\n\t\t// Update item count with the incoming count\r\n\t\tcart.map((product, i) => {\r\n\t\t\tif (product._id === productId) {\r\n\t\t\t\tcart[i].count = count;\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Set cart items back in localStorage\r\n\t\tlocalStorage.setItem('cart', JSON.stringify(cart));\r\n\t}\r\n};\r\n\r\n// Remove item count based on given product id and count\r\nexport const removeItem = (productId) => {\r\n\tlet cart = [];\r\n\r\n\t// Get items from cart in localStorage and put them in cart array\r\n\tif (typeof window !== 'undefined') {\r\n\t\tif (localStorage.getItem('cart')) {\r\n\t\t\tcart = JSON.parse(localStorage.getItem('cart'));\r\n\t\t}\r\n\r\n\t\t// If id matches, remove item from cart using splice() method\r\n\t\tcart.map((product, i) => {\r\n\t\t\tif (product._id === productId) {\r\n\t\t\t\t// 1st arg is the index of where to splice\r\n\t\t\t\t// 2nd arg is how many to take out\r\n\t\t\t\tcart.splice(i, 1);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Set cart items back in localStorage\r\n\t\tlocalStorage.setItem('cart', JSON.stringify(cart));\r\n\t}\r\n\treturn cart;\r\n};\r\n\r\n// Remove items from cart in localStorage\r\n// next is a callback function\r\nexport const emptyCart = (next) => {\r\n\tif (typeof window !== 'undefined') {\r\n\t\tlocalStorage.removeItem('cart');\r\n\t\tnext();\r\n\t}\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}