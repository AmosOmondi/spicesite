{"ast":null,"code":"import { API } from '../config';\n\n// Get user from backend based on userId and token\nexport const read = (userId, token) => {\n  return fetch(`${API}/user/${userId}`, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\n\n// Update user info in backend\nexport const update = (userId, token, user) => {\n  return fetch(`${API}/user/${userId}`, {\n    method: 'PUT',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    },\n    // Send the user data\n    body: JSON.stringify(user)\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};\n\n// Update user info in localStorage\n// user arg is the user data coming from Profile component\nexport const updateUser = (user, next) => {\n  if (typeof window !== 'undefined') {\n    if (localStorage.getItem('jwt')) {\n      let auth = JSON.parse(localStorage.getItem('jwt'));\n      // Update the user info\n      auth.user = user;\n      // Set the user info (auth) back in the localStorage in the key 'jwt'\n      localStorage.setItem('jwt', JSON.stringify(auth));\n      next();\n    }\n  }\n};\n\n// Get purchase history for a user from backend\nexport const getPurchaseHistory = (userId, token) => {\n  return fetch(`${API}/orders/by/user/${userId}`, {\n    method: 'GET',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      Authorization: `Bearer ${token}`\n    }\n  }).then(response => {\n    return response.json();\n  }).catch(err => console.log(err));\n};","map":{"version":3,"names":["API","read","userId","token","fetch","method","headers","Accept","Authorization","then","response","json","catch","err","console","log","update","user","body","JSON","stringify","updateUser","next","window","localStorage","getItem","auth","parse","setItem","getPurchaseHistory"],"sources":["D:/webprojects/react/ecom/two/src/user/apiUser.js"],"sourcesContent":["import { API } from '../config';\r\n\r\n// Get user from backend based on userId and token\r\nexport const read = (userId, token) => {\r\n\treturn fetch(`${API}/user/${userId}`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t}\r\n\t})\r\n\t\t.then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.catch((err) => console.log(err));\r\n};\r\n\r\n// Update user info in backend\r\nexport const update = (userId, token, user) => {\r\n\treturn fetch(`${API}/user/${userId}`, {\r\n\t\tmethod: 'PUT',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t},\r\n\t\t// Send the user data\r\n\t\tbody: JSON.stringify(user)\r\n\t})\r\n\t\t.then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.catch((err) => console.log(err));\r\n};\r\n\r\n// Update user info in localStorage\r\n// user arg is the user data coming from Profile component\r\nexport const updateUser = (user, next) => {\r\n\tif (typeof window !== 'undefined') {\r\n\t\tif (localStorage.getItem('jwt')) {\r\n\t\t\tlet auth = JSON.parse(localStorage.getItem('jwt'));\r\n\t\t\t// Update the user info\r\n\t\t\tauth.user = user;\r\n\t\t\t// Set the user info (auth) back in the localStorage in the key 'jwt'\r\n\t\t\tlocalStorage.setItem('jwt', JSON.stringify(auth));\r\n\t\t\tnext();\r\n\t\t}\r\n\t}\r\n};\r\n\r\n// Get purchase history for a user from backend\r\nexport const getPurchaseHistory = (userId, token) => {\r\n\treturn fetch(`${API}/orders/by/user/${userId}`, {\r\n\t\tmethod: 'GET',\r\n\t\theaders: {\r\n\t\t\tAccept: 'application/json',\r\n\t\t\t'Content-Type': 'application/json',\r\n\t\t\tAuthorization: `Bearer ${token}`\r\n\t\t}\r\n\t})\r\n\t\t.then((response) => {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.catch((err) => console.log(err));\r\n};\r\n"],"mappings":"AAAA,SAASA,GAAG,QAAQ,WAAW;;AAE/B;AACA,OAAO,MAAMC,IAAI,GAAGA,CAACC,MAAM,EAAEC,KAAK,KAAK;EACtC,OAAOC,KAAK,CAAE,GAAEJ,GAAI,SAAQE,MAAO,EAAC,EAAE;IACrCG,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACRC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAG,UAASL,KAAM;IAChC;EACD,CAAC,CAAC,CACAM,IAAI,CAAEC,QAAQ,IAAK;IACnB,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;EACvB,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;AACnC,CAAC;;AAED;AACA,OAAO,MAAMG,MAAM,GAAGA,CAACd,MAAM,EAAEC,KAAK,EAAEc,IAAI,KAAK;EAC9C,OAAOb,KAAK,CAAE,GAAEJ,GAAI,SAAQE,MAAO,EAAC,EAAE;IACrCG,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACRC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAG,UAASL,KAAM;IAChC,CAAC;IACD;IACAe,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACH,IAAI;EAC1B,CAAC,CAAC,CACAR,IAAI,CAAEC,QAAQ,IAAK;IACnB,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;EACvB,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;AACnC,CAAC;;AAED;AACA;AACA,OAAO,MAAMQ,UAAU,GAAGA,CAACJ,IAAI,EAAEK,IAAI,KAAK;EACzC,IAAI,OAAOC,MAAM,KAAK,WAAW,EAAE;IAClC,IAAIC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC,EAAE;MAChC,IAAIC,IAAI,GAAGP,IAAI,CAACQ,KAAK,CAACH,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC,CAAC;MAClD;MACAC,IAAI,CAACT,IAAI,GAAGA,IAAI;MAChB;MACAO,YAAY,CAACI,OAAO,CAAC,KAAK,EAAET,IAAI,CAACC,SAAS,CAACM,IAAI,CAAC,CAAC;MACjDJ,IAAI,CAAC,CAAC;IACP;EACD;AACD,CAAC;;AAED;AACA,OAAO,MAAMO,kBAAkB,GAAGA,CAAC3B,MAAM,EAAEC,KAAK,KAAK;EACpD,OAAOC,KAAK,CAAE,GAAEJ,GAAI,mBAAkBE,MAAO,EAAC,EAAE;IAC/CG,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACRC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE,kBAAkB;MAClCC,aAAa,EAAG,UAASL,KAAM;IAChC;EACD,CAAC,CAAC,CACAM,IAAI,CAAEC,QAAQ,IAAK;IACnB,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;EACvB,CAAC,CAAC,CACDC,KAAK,CAAEC,GAAG,IAAKC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC;AACnC,CAAC"},"metadata":{},"sourceType":"module"}